
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BoardScalarFieldEnum = {
  id: 'id',
  content: 'content',
  schoolId: 'schoolId',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  status: 'status',
  title: 'title'
};

exports.Prisma.BrushedScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  brushedAt: 'brushedAt',
  brushedStatus: 'brushedStatus'
};

exports.Prisma.ContentsScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  fileType: 'fileType',
  fileName: 'fileName',
  seq: 'seq',
  contentsStatus: 'contentsStatus'
};

exports.Prisma.HolidayScalarFieldEnum = {
  id: 'id',
  holidayName: 'holidayName',
  holidayAt: 'holidayAt',
  holidayStatus: 'holidayStatus'
};

exports.Prisma.SchedulesScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  scheduleName: 'scheduleName',
  scheduleTarget: 'scheduleTarget',
  scheduleAt: 'scheduleAt',
  scheduleStatus: 'scheduleStatus'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  schoolName: 'schoolName',
  loginId: 'loginId',
  loginPw: 'loginPw',
  teacherName: 'teacherName',
  teacherEmail: 'teacherEmail',
  teacherPhone: 'teacherPhone',
  schoolLogo: 'schoolLogo',
  startAt: 'startAt',
  endAt: 'endAt',
  schoolType: 'schoolType',
  schoolLevel: 'schoolLevel',
  createdAt: 'createdAt',
  schoolStatus: 'schoolStatus',
  officeCode: 'officeCode',
  schoolCode: 'schoolCode',
  address: 'address'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  schoolId: 'schoolId',
  studentGrade: 'studentGrade',
  studentClass: 'studentClass',
  studentNumber: 'studentNumber',
  studentName: 'studentName',
  studentGender: 'studentGender',
  studentStatus: 'studentStatus',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.BoardOrderByRelevanceFieldEnum = {
  content: 'content',
  schoolId: 'schoolId',
  comment: 'comment',
  title: 'title'
};

exports.Prisma.BrushedOrderByRelevanceFieldEnum = {
  studentId: 'studentId'
};

exports.Prisma.ContentsOrderByRelevanceFieldEnum = {
  schoolId: 'schoolId',
  fileType: 'fileType',
  fileName: 'fileName'
};

exports.Prisma.HolidayOrderByRelevanceFieldEnum = {
  holidayName: 'holidayName'
};

exports.Prisma.SchedulesOrderByRelevanceFieldEnum = {
  schoolId: 'schoolId',
  scheduleName: 'scheduleName',
  scheduleTarget: 'scheduleTarget'
};

exports.Prisma.SchoolOrderByRelevanceFieldEnum = {
  schoolId: 'schoolId',
  schoolName: 'schoolName',
  loginId: 'loginId',
  loginPw: 'loginPw',
  teacherName: 'teacherName',
  teacherEmail: 'teacherEmail',
  teacherPhone: 'teacherPhone',
  schoolLogo: 'schoolLogo',
  officeCode: 'officeCode',
  schoolCode: 'schoolCode',
  address: 'address'
};

exports.Prisma.StudentOrderByRelevanceFieldEnum = {
  studentId: 'studentId',
  schoolId: 'schoolId',
  studentClass: 'studentClass',
  studentName: 'studentName'
};
exports.BoardStatus = exports.$Enums.BoardStatus = {
  UNANSWERED: 'UNANSWERED',
  ANSWERED: 'ANSWERED',
  DELETED: 'DELETED'
};

exports.BrushedBrushedStatus = exports.$Enums.BrushedBrushedStatus = {
  No: 'No',
  Ok: 'Ok',
  EarlyLeave: 'EarlyLeave',
  Travel: 'Travel',
  Workshop: 'Workshop',
  Absence: 'Absence'
};

exports.SchoolSchoolType = exports.$Enums.SchoolSchoolType = {
  master: 'master',
  teacher: 'teacher'
};

exports.SchoolSchoolLevel = exports.$Enums.SchoolSchoolLevel = {
  elementary: 'elementary',
  middle: 'middle',
  high: 'high'
};

exports.StudentStudentGender = exports.$Enums.StudentStudentGender = {
  male: 'male',
  female: 'female'
};

exports.Prisma.ModelName = {
  Board: 'Board',
  Brushed: 'Brushed',
  Contents: 'Contents',
  Holiday: 'Holiday',
  Schedules: 'Schedules',
  School: 'School',
  Student: 'Student'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
